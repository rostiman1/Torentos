@inject IProductService ProductService
@implements IDisposable
@if(ProductService.Products == null || ProductService.Products.Count == 0)
{
    <span>@ProductService.Message</span>
}
else
{
   <ul class="list-unstyled">
    @foreach (var product in ProductService.Products)
    {
        <li class="media my-3">
            <span>
                 <div>@if(product.Type == "images/VideoGame.png")
                {
                   <div>Games</div>
                }
                @if(product.Type == "images/Movie.png")
                {
                   <div>Movies</div>
                }
                @if(product.Type == "images/Music.png")
                {
                   <div>Music</div>
                }
            </div>
                <img class="media-img" src="@product.Type" width="50" height="50"/></span>
            <span class="media-image-wrapper mr-2">
                <a href="/product/@product.Id">
                    <img class="media-img" src="@product.Image" width="300" height="200" alt="@product.Title"/>
                    </a>
            </span>
            <div class="media-body">
                <a href="/product/@product.Id">
                <h4 class="mb-0">@product.Title</h4>    
                </a>
                <p>@product.Description</p>
                <h5 class="price">
                    <button class="btn btn-success"><i class="fa fa-download"></i> Download</button>
                </h5>
                 <p>@GetSizeOfTOrrent(product)</p>
            </div>
            <br>
        </li>
    }
</ul>
    for (var i = 1; i < ProductService.PageCount; i++)
    {
        <a class="btn
            @(i== ProductService.CurrentPage? "btn-info" : "btn-outline-info")
            page-selection"
            href="/search/@ProductService.LastSearchText/@i">@i</a>
    }
}
@code {

    protected override void OnInitialized()
    {
        ProductService.ProductsChanged += StateHasChanged;
    }
    public void Dispose()
    {
        ProductService.ProductsChanged -= StateHasChanged;
    }
    private string GetSizeOfTOrrent(Product product)
    {
        var variant = product.Variants;
        decimal exactSize = variant.Min(x => x.Price);
        return $"Total size of the torrent {exactSize} GB";
    }
}
